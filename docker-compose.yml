services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: employee_manager_db
    environment:
      POSTGRES_DB: employee_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    labels:
      - "port:5432"
      # - "security=basic"
      # - "security_file=/home/yamini/employee_management/.security_file.txt"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db:/docker-entrypoint-initdb.d
    networks:
      - employee_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Employee Manager Application
  app:
    image: employee_manager_app:latest
    build:
      context: .
      dockerfile: infra/docker/Dockerfile
    container_name: employee_manager_app
    ports:
      - "8501:8501"
    labels:
      - "port:8501"
      - "service=employee_manager"
      - "version=1.0"
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: employee_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      # Application Configuration
      APP_USERNAME: admin
      APP_PASSWORD: aganitha@123
      # API Keys (replace with your actual keys)
      GEMINI_API_KEY: AIzaSyBx6zw9ZbXet_dW3pnx2f9I0qWKOnPq4yM
      # Streamlit Configuration
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
    volumes:
      - app_data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - employee_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Weekly backup service
  backup-scheduler:
    image: alpine:latest
    container_name: employee_backup_scheduler
    labels:
      - "service=backup"
      - "schedule=weekly"
    volumes:
      - ./:/app
      - app_data:/app/data
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      sh -c "
        apk add --no-cache docker-cli dcron postgresql15-client python3 &&
        echo '0 2 * * 0 cd /app && sh infra/scripts/docker-backup.sh' > /etc/crontabs/root &&
        echo '0 3 1 * * cd /app && python3 infra/scripts/purge_logs.py 30' >> /etc/crontabs/root &&
        echo 'Starting scheduler services...' &&
        crond -f -l 2
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - employee_network
    restart: unless-stopped

volumes:
  postgres_data:
    name: employee_db_data
    labels:
      - "backup=true"
      - "type=persistent"
  app_data:
    name: employee_app_data
    labels:
      - "backup=true"
      - "type=persistent"

networks:
  employee_network:
    name: employee_net
    labels:
      - "project=employee_management"

